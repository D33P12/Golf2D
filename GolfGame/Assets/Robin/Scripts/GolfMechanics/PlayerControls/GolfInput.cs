//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/Robin/Scripts/GolfMechanics/PlayerControls/GolfInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @GolfInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @GolfInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""GolfInput"",
    ""maps"": [
        {
            ""name"": ""GolfBall"",
            ""id"": ""701bd38a-17b8-4d2e-be4d-6f85c8c67b41"",
            ""actions"": [
                {
                    ""name"": ""ShootDirectionChange"",
                    ""type"": ""Value"",
                    ""id"": ""efcef1bd-8c49-4c37-a87a-c5ca936627ee"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Shoot"",
                    ""type"": ""Button"",
                    ""id"": ""2080eaf4-830e-4fa1-b04b-b446b1510683"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""Left&Right"",
                    ""id"": ""6924fcac-4d12-4212-94fe-8e4aca63a59f"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ShootDirectionChange"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""left"",
                    ""id"": ""6efab9d7-f7c8-4369-b2b9-7d629cd37a2e"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ShootDirectionChange"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""670b2456-7d2e-4e22-aa4d-53ce4ac7f1e9"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ShootDirectionChange"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""33e621fe-7d33-49e4-a4ad-b8359cab20ae"",
                    ""path"": ""<Keyboard>/z"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // GolfBall
        m_GolfBall = asset.FindActionMap("GolfBall", throwIfNotFound: true);
        m_GolfBall_ShootDirectionChange = m_GolfBall.FindAction("ShootDirectionChange", throwIfNotFound: true);
        m_GolfBall_Shoot = m_GolfBall.FindAction("Shoot", throwIfNotFound: true);
    }

    ~@GolfInput()
    {
        UnityEngine.Debug.Assert(!m_GolfBall.enabled, "This will cause a leak and performance issues, GolfInput.GolfBall.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // GolfBall
    private readonly InputActionMap m_GolfBall;
    private List<IGolfBallActions> m_GolfBallActionsCallbackInterfaces = new List<IGolfBallActions>();
    private readonly InputAction m_GolfBall_ShootDirectionChange;
    private readonly InputAction m_GolfBall_Shoot;
    public struct GolfBallActions
    {
        private @GolfInput m_Wrapper;
        public GolfBallActions(@GolfInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @ShootDirectionChange => m_Wrapper.m_GolfBall_ShootDirectionChange;
        public InputAction @Shoot => m_Wrapper.m_GolfBall_Shoot;
        public InputActionMap Get() { return m_Wrapper.m_GolfBall; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GolfBallActions set) { return set.Get(); }
        public void AddCallbacks(IGolfBallActions instance)
        {
            if (instance == null || m_Wrapper.m_GolfBallActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GolfBallActionsCallbackInterfaces.Add(instance);
            @ShootDirectionChange.started += instance.OnShootDirectionChange;
            @ShootDirectionChange.performed += instance.OnShootDirectionChange;
            @ShootDirectionChange.canceled += instance.OnShootDirectionChange;
            @Shoot.started += instance.OnShoot;
            @Shoot.performed += instance.OnShoot;
            @Shoot.canceled += instance.OnShoot;
        }

        private void UnregisterCallbacks(IGolfBallActions instance)
        {
            @ShootDirectionChange.started -= instance.OnShootDirectionChange;
            @ShootDirectionChange.performed -= instance.OnShootDirectionChange;
            @ShootDirectionChange.canceled -= instance.OnShootDirectionChange;
            @Shoot.started -= instance.OnShoot;
            @Shoot.performed -= instance.OnShoot;
            @Shoot.canceled -= instance.OnShoot;
        }

        public void RemoveCallbacks(IGolfBallActions instance)
        {
            if (m_Wrapper.m_GolfBallActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGolfBallActions instance)
        {
            foreach (var item in m_Wrapper.m_GolfBallActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GolfBallActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public GolfBallActions @GolfBall => new GolfBallActions(this);
    public interface IGolfBallActions
    {
        void OnShootDirectionChange(InputAction.CallbackContext context);
        void OnShoot(InputAction.CallbackContext context);
    }
}
